package com.example.arzones

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import kotlinx.coroutines.tasks.await
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject

class LocationWorker(appContext: android.content.Context, workerParams: WorkerParameters) :
    CoroutineWorker(appContext, workerParams) {

    override suspend fun doWork(): Result {
        Log.i("LocationWorker", "‚ñ∂Ô∏è D√©but d'une nouvelle ex√©cution du Worker")

        // üîí V√©rifier la permission avant d‚Äôacc√©der au GPS
        if (ActivityCompat.checkSelfPermission(
                applicationContext,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED &&
            ActivityCompat.checkSelfPermission(
                applicationContext,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            Log.e("LocationWorker", "‚ùå Permission localisation refus√©e")
            return Result.retry()
        }

        val fused = LocationServices.getFusedLocationProviderClient(applicationContext)

        return try {
            // ‚úÖ Essayer de r√©cup√©rer une localisation fra√Æche
            val freshLocation = fused.getCurrentLocation(
                Priority.PRIORITY_HIGH_ACCURACY,
                null
            ).await()

            var latitude = freshLocation?.latitude
            var longitude = freshLocation?.longitude

            if (latitude == null || longitude == null || (latitude == 0.0 && longitude == 0.0)) {
                Log.w("LocationWorker", "‚ö†Ô∏è Localisation fra√Æche indisponible, tentative avec la derni√®re connue")
                val lastLocation = fused.lastLocation.await()
                latitude = lastLocation?.latitude
                longitude = lastLocation?.longitude
            }

            // Log pour debug
            Log.i("LocationWorker", "üìç Position obtenue : $latitude , $longitude")

            val deviceModel = "${Build.MANUFACTURER} ${Build.MODEL}"

            // Envoi des donn√©es
            sendToJsonBin(latitude, longitude, deviceModel)
            Result.success()
        } catch (e: Exception) {
            Log.e("LocationWorker", "‚ùå Erreur lors de la r√©cup√©ration de la localisation", e)
            Result.retry()
        }
    }

    private fun sendToJsonBin(lat: Double?, lon: Double?, device: String) {
        val client = OkHttpClient()
        val data = JSONObject().apply {
            put("device", device)
            put("latitude", lat ?: JSONObject.NULL)
            put("longitude", lon ?: JSONObject.NULL)
            put("timestamp", System.currentTimeMillis())
        }

        val body = data.toString().toRequestBody("application/json".toMediaType())

        val req = Request.Builder()
            .url("https://api.jsonbin.io/v3/b/68b22ed043b1c97be92fc808")   // <-- Ton Bin ID
            .addHeader("X-Master-Key", "\$2a\$10\$BOkgsvsfuUZHFXRDmlftwO2z1eXV/4lFloHWPo2Yg82zbY3Dp5GES") // <-- Ta cl√©
            .addHeader("Content-Type", "application/json")
            .put(body)
            .build()

        client.newCall(req).execute().use { res ->
            Log.i("LocationWorker", "üì§ Donn√©es envoy√©es √† JSONBin -> HTTP ${res.code}")
        }
    }
}
